# OTDM Lab 2: run file
# Marcel, Mengxue
# Autumn 2021

# To run this file:
#	$> ampl: include svm.run;


#########
# TRAIN #
#########

# Solve the primal
reset;
print "SVM_PRIMAL:";

model svm-primal.mod;
data "./data/size1000-seed75421.dat"; #spambase #size100-seed66407 #size1000-seed75421

option solver cplex; #gurobi

problem SVM_PRIMAL: w, gamma, s, primal, c1, c2;
solve SVM_PRIMAL;
display w, gamma, s;


# Solve the dual
reset;
print "SVM_DUAL:";
model svm-dual.mod;
data "./data/size1000-seed75421.dat";

option solver cplex;

problem SVM_DUAL: lambda, dual, c1;
solve SVM_DUAL;
display lambda;


# Compute w, gamma from the dual solution
param w {1..n};
let {j in {1..n}} w[j] := sum{i in {1..m}} lambda[i]*y_train[i]*A_train[i,j];
display w;

param gamma;
for {i in {1..m}} {
	if lambda[i] > 0.01 and lambda[i] < nu*0.99 then {
		# A support vector point was found
		let gamma := 1/y_train[i] - sum{j in {1..n}} w[j]*A_train[i,j];
		break;
	}
}
display gamma;




########
# TEST #
########

# Predict values with the test dataset
param y_pred {1..m};
let {i in {1..m}} y_pred[i] := gamma + sum{j in {1..n}}w[j]*A_test[i,j];
let {i in {1..m}} y_pred[i] := if y_pred[i] <= 0 then -1 else 1;
display y_pred;

# Check misclassifications
param misclassifications default 0;
for {i in {1..m}} {
	if y_pred[i] != y_test[i] then
		let misclassifications := misclassifications + 1;
}

display misclassifications;

param accuracy = (m - misclassifications) / m;
display accuracy;
